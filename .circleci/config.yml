version: 2

defaults: &defaults
  docker:
    - image: circleci/golang:1.12.4
      user: root
    - image: circleci/postgres:9.6-alpine
  working_directory: /workspace
  environment:
    GOPATH: /
    GOCACHE: /.cache/go-build
    GO111MODULE: "on"
    PGHOST: 127.0.0.1

jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.11.0-buster
    environment:
      NODE_ENV: development
    steps:
      - checkout
      - run: npm install
      - run: npm run-script lint
      - run: npm run-script build
      - run: npm test
  setup_build_backend:
    <<: *defaults
    steps:
      - run: go env
      - checkout
      - restore_cache:
          keys:
            - go-module-cache-v1-{{ checksum "/workspace/go.sum" }}
            - go-module-cache-v1-
      - run: go mod download
      - save_cache:
          key: go-module-cache-v1-{{ checksum "/workspace/go.sum" }}
          paths:
            - /pkg/mod/cache
      - save_cache:
          key: workspace-v1-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /workspace
  build_backend:
    <<: *defaults
    steps:
      - restore_cache:
          keys:
            - workspace-v1-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - go-module-cache-v1-{{ checksum "/workspace/go.sum" }}
            - go-module-cache-v1-
      - restore_cache:
          keys:
            - go-build-cache-v1-{{ .Branch }}-{{ .Revision }}
            - go-build-cache-v1-{{ .Branch }}
            - go-module-cache-v1-
      - run: make build
  check_format:
    <<: *defaults
    steps:
      - restore_cache:
          keys:
            - workspace-v1-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - go-module-cache-v1-{{ checksum "/workspace/go.sum" }}
            - go-module-cache-v1-
      - restore_cache:
          keys:
            - go-build-cache-v1-{{ .Branch }}-{{ .Revision }}
            - go-build-cache-v1-{{ .Branch }}
            - go-module-cache-v1-
      - run: test `gofmt -l $(git ls-files | grep -e '\.go$' | grep -v -e vendor) | wc -l` = 0
  test_backend:
    <<: *defaults
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install -y postgresql-client-9.6
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - restore_cache:
          keys:
            - workspace-v1-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - go-module-cache-v1-{{ checksum "/workspace/go.sum" }}
            - go-module-cache-v1-
      - restore_cache:
          keys:
            - go-build-cache-v1-{{ .Branch }}-{{ .Revision }}
            - go-build-cache-v1-{{ .Branch }}
            - go-module-cache-v1-
      - run: make deps
      - run: git clone https://github.com/syou6162/go-active-learning.git && cd go-active-learning && psql -U postgres -f script/create_database.sql && sql-migrate up -env=test && cd ../ && rm -rf go-active-learning
      - run: make cover COVERAGE='/home/circleci/coverage.out'
      - run: goveralls -coverprofile=/home/circleci/coverage.out -service=circle-ci -repotoken=$COVERALLS_TOKEN
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - setup_build_backend 
      - build_frontend 
      - build_backend:
          requires:
            - setup_build_backend 
      - check_format:
          requires:
            - setup_build_backend 
      - test_backend:
          requires:
            - build_backend
  nightly_workflow:
    triggers:
      - schedule:
          cron: "0 6 * * *" # UTCで記述。この場合は15時
          filters:
            branches:
              only:
                - master
    jobs:
      - setup_build_backend 
      - build_frontend 
      - build_backend:
          requires:
            - setup_build_backend 
      - check_format:
          requires:
            - setup_build_backend 
      - test_backend:
          requires:
            - build_backend
